# –ö–æ–Ω–¥—Ä–∞—Ç—é–∫ –ï–≥–æ—Ä 3–ò–°–¥-1.22
# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è ‚Ññ12 –í–∞—Ä–∏–∞–Ω—Ç 15
# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø —Ü–µ–ª—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ [a; b]. –¢—Ä–µ–±—É–µ—Ç—Å—è:
# –∞) –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–Ω–æ–∂–µ—Å—Ç–≤–∞, —è–≤–ª—è—é—â–∏–µ—Å—è –ø—Ä–æ—Å—Ç—ã–º–∏ —á–∏—Å–ª–∞–º–∏;
# –±) –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤ –¥–∞–Ω–Ω–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ [—Å; d];
# –≤) –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —ç—Ç–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ;
# –≥) –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ [–∞; b] –Ω–µ –ø–æ–ø–∞–ª–æ –≤ –¥–∞–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ;
#–¥) —Ä–∞–∑–±–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞ –¥–≤–∞: –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —á–∏—Å–ª–∞, –≤ –¥–≤–æ–∏—á–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª–µ–µ k –Ω—É–ª–µ–π, –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.





import random

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω—É–ª–µ–π –≤ –¥–≤–æ–∏—á–Ω–æ–π –∑–∞–ø–∏—Å–∏ —á–∏—Å–ª–∞
def count_zeros_in_binary(n):
    return bin(n).count('0') - 1  # –í—ã—á–∏—Ç–∞–µ–º 1, —á—Ç–æ–±—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å '0' –≤ –Ω–∞—á–∞–ª–µ

# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
n = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª (n): "))
a, b = map(int, input("–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª [a, b]: ").split())
c, d = map(int, input("–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª [c, d]: ").split())
k = int(input("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–π –≤ –¥–≤–æ–∏—á–Ω–æ–π –∑–∞–ø–∏—Å–∏ (k): "))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [a, b]
random_numbers_set = set(random.randint(a, b) for _ in range(n))

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
results = {
    "–ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ": [num for num in random_numbers_set if is_prime(num)],
    "–ß—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [c, d]": [num for num in random_numbers_set if c <= num <= d and num % 2 == 0],
    "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ": len(random_numbers_set),
    "–ß–∏—Å–µ–ª –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [a, b], –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ": (b - a + 1) - len(random_numbers_set),
    "–ß–∏—Å–ª–∞ —Å –±–æ–ª–µ–µ —á–µ–º k –Ω—É–ª—è–º–∏ –≤ –¥–≤–æ–∏—á–Ω–æ–π –∑–∞–ø–∏—Å–∏": {num for num in random_numbers_set if count_zeros_in_binary(num) > k},
    "–û—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∏—Å–ª–∞": {num for num in random_numbers_set if count_zeros_in_binary(num) <= k}
}

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print("\nüîπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:")
for description, value in results.items():
    print(f"{description}: {value}")
